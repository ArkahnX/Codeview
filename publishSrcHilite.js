/**
 * cannot confirm this will work with unmodified template
 */
JSDOC.PluginManager.registerPlugin("JSDOC.publishSrcHilite", {
	onPublishSrc: function(src) {
		if (src.path in JsHilite.cache) {
			return; // already generated src code
		} else JsHilite.cache[src.path] = true;

		try {
			var sourceCode = IO.readFile(src.path);
		} catch (e) {
			print(e.message);
			quit();
		}
		var header = '<!DOCTYPE html>' + "\n" + '<html>' + "\n" + '<head>' + "\n" + '<meta charset="utf-8"></meta>' + "\n" + '<meta name="generator" content="JsDoc Toolkit"></meta>' + "\n" + '<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"></meta>' + "\n" + '<meta name="mobileoptimized" content="0"></meta>' + "\n" + '<style>' + "\n" + base64_decode(css) + "\n" + "</style>" + "\n" + "<script>" + "\n" + base64_decode(js) + "\n" + "</script>" + "\n" + "</head>" + "\n" + "<body>" + "\n" + "<pre>" + "\n" + "<code class=\"js\">" + "\n";
		var footer = "</code>" + "\n" + "</pre>" + "\n" + "<script>" + "\n" + "highlightJavascript.format();" + "\n" + "</script>" + "\n" + "</body>" + "\n" + "</html>";
		src.hilited = header + sourceCode + footer;
	}
});

function JsHilite(src) {
	this.src = src;
	this.header = '<!DOCTYPE html>' + "\n" + '<html>' + "\n" + '<head>' + "\n" + '<meta charset="utf-8"></meta>' + "\n" + '<meta name="generator" content="JsDoc Toolkit"></meta>' + "\n" + '<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"></meta>' + "\n" + '<meta name="mobileoptimized" content="0"></meta>' + "\n" + '<style>' + "\n" + base64_decode(css) + "\n" + "</style>" + "\n" + "<script>" + "\n" + base64_decode(js) + "\n" + "highlightJavascript.format();" + "\n" + "</script>" + "\n" + "</head>" + "\n" + "<body>" + "\n" + "<pre>" + "\n" + "<code class=\"js\">" + "\n";
	this.footer = "</code>" + "\n" + "</pre>" + "\n" + "<script>" + "\n" + base64_decode(js) + "\n" + "highlightJavascript.format();" + "\n" + "</script>" + "\n" + "</body>" + "\n" + "</html>";
}

JsHilite.cache = {};

JsHilite.prototype.hilite = function() {
	return this.header + this.src + this.footer;
}

function utf8_decode(str_data) {
	// Converts a UTF-8 encoded string to ISO-8859-1
	//
	// version: 1109.2015
	// discuss at: http://phpjs.org/functions/utf8_decode
	// +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
	// +      input by: Aman Gupta
	// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	// +   improved by: Norman "zEh" Fuchs
	// +   bugfixed by: hitwork
	// +   bugfixed by: Onno Marsman
	// +      input by: Brett Zamir (http://brett-zamir.me)
	// +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	// *     example 1: utf8_decode('Kevin van Zonneveld');
	// *     returns 1: 'Kevin van Zonneveld'
	var tmp_arr = [],
		i = 0,
		ac = 0,
		c1 = 0,
		c2 = 0,
		c3 = 0;

	str_data += '';

	while (i < str_data.length) {
		c1 = str_data.charCodeAt(i);
		if (c1 < 128) {
			tmp_arr[ac++] = String.fromCharCode(c1);
			i++;
		} else if (c1 > 191 && c1 < 224) {
			c2 = str_data.charCodeAt(i + 1);
			tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
			i += 2;
		} else {
			c2 = str_data.charCodeAt(i + 1);
			c3 = str_data.charCodeAt(i + 2);
			tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
			i += 3;
		}
	}

	return tmp_arr.join('');
};

function base64_decode(data) {
	// Decodes string using MIME base64 algorithm
	//
	// version: 1109.2015
	// discuss at: http://phpjs.org/functions/base64_decode
	// +   original by: Tyler Akins (http://rumkin.com)
	// +   improved by: Thunder.m
	// +      input by: Aman Gupta
	// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	// +   bugfixed by: Onno Marsman
	// +   bugfixed by: Pellentesque Malesuada
	// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	// +      input by: Brett Zamir (http://brett-zamir.me)
	// +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	// -    depends on: utf8_decode
	// *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
	// *     returns 1: 'Kevin van Zonneveld'
	// mozilla has this native
	// - but breaks in 2.0.0.12!
	//if (typeof this.window['btoa'] == 'function') {
	//    return btoa(data);
	//}
	var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
		ac = 0,
		dec = "",
		tmp_arr = [];

	if (!data) {
		return data;
	}

	data += '';

	do { // unpack four hexets into three octets using index points in b64
		h1 = b64.indexOf(data.charAt(i++));
		h2 = b64.indexOf(data.charAt(i++));
		h3 = b64.indexOf(data.charAt(i++));
		h4 = b64.indexOf(data.charAt(i++));

		bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

		o1 = bits >> 16 & 0xff;
		o2 = bits >> 8 & 0xff;
		o3 = bits & 0xff;

		if (h3 == 64) {
			tmp_arr[ac++] = String.fromCharCode(o1);
		} else if (h4 == 64) {
			tmp_arr[ac++] = String.fromCharCode(o1, o2);
		} else {
			tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
		}
	} while (i < data.length);

	dec = tmp_arr.join('');
	dec = utf8_decode(dec);

	return dec;
};
var css = "QGNoYXJzZXQgInV0Zi04IjsNCnByZSB7DQoJYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDIzOCwyMzgsMjM4LDAuOTIxNSk7DQoJbWFyZ2luOjA7DQoJLypvdmVyZmxvdzphdXRvOw0KCXdoaXRlLXNwYWNlOiBwcmUtd3JhcDsNCgl3aGl0ZS1zcGFjZTogLXByZS13cmFwOw0KCXdoaXRlLXNwYWNlOiAtby1wcmUtd3JhcDsNCgl3aGl0ZS1zcGFjZTogLW1vei1wcmUtd3JhcDsNCgl3aGl0ZS1zcGFjZTogLWhwLXByZS13cmFwOw0KCXdvcmQtd3JhcDogYnJlYWstd29yZDsqLw0KfQ0KDQpvbCB7DQoJbGlzdC1zdHlsZS10eXBlOmRlY2ltYWwtbGVhZGluZy16ZXJvOw0KCW1hcmdpbjowOw0KCW1hcmdpbi1sZWZ0OjNlbTsNCgltYXJnaW4tdG9wOjAhaW1wb3J0YW50Ow0KCW1hcmdpbi1ib3R0b206MCFpbXBvcnRhbnQ7DQoJcGFkZGluZzowOw0KCWRpc3BsYXk6aW5saW5lLWJsb2NrOw0KCWJhY2tncm91bmQtY29sb3I6cmdiYSgyMzgsMjM4LDIzOCwwLjkyMTUpOw0KfQ0KcHJlIGNvZGUgbGkgew0KCWZvbnQtZmFtaWx5OiBDb25zb2xhcywgIkNvdXJpZXIgTmV3IjsNCgljb2xvcjpyZ2JhKDEyNSwgMTI1LCAxMjUsIDAuOTU2ODYpOw0KCWJhY2tncm91bmQtY29sb3I6cmdiYSgyMzgsMjM4LDIzOCwwLjkyMTUpOw0KfQ0KcHJlIGNvZGUgbGkgc3BhbiB7DQoJZm9udC1mYW1pbHk6Q29uc29sYXMsICJDb3VyaWVyIE5ldyI7DQoJY29sb3I6YmxhY2s7DQp9DQpwcmUgY29kZSBsaS5oaWdobGlnaHRlZCB7DQoJYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuMTAxOTYpOw0KfQ0KcHJlIGNvZGUgLmNvbW1lbnQgew0KCWNvbG9yOiMwMDY2RkY7DQoJZm9udC1zdHlsZTogaXRhbGljOw0KfQ0KcHJlIGNvZGUgLnN0cmluZyB7DQoJY29sb3I6IzAwOTkzMzsNCn0NCnByZSBjb2RlIC5udW1iZXIgew0KCWNvbG9yOiMwMDY2RkY7DQp9DQpwcmUgY29kZSAubmF0aXZlIHsNCgljb2xvcjojMDAwMEZGOw0KCWZvbnQtd2VpZ2h0OmJvbGQ7DQp9DQpwcmUgY29kZSAuY29uc3RydWN0cyB7DQoJY29sb3I6IzAwMDBGRjsNCn0NCnByZSBjb2RlIC5sYW5ndWFnZSB7DQoJY29sb3I6Izk3MDBDQzsNCn0NCnByZSBjb2RlIC5yZXNlcnZlZCB7DQoJY29sb3I6IzAwMDAwMDsNCglmb250LXdlaWdodDogYm9sZDsNCn0NCnByZSBjb2RlIC5jb25zdGFudCB7DQoJY29sb3I6IzY3ODJEMzsNCn0NCnByZSBjb2RlIC5mdW5jdGlvbiB7DQoJY29sb3I6I0ZGODAwMDsNCn0NCnByZSBjb2RlIC5yZWdleCB7DQoJY29sb3I6I0ZGMDA4MDsNCn0NCg0KOjotd2Via2l0LXNjcm9sbGJhciB7DQoJaGVpZ2h0OjExcHg7DQoJd2lkdGg6MTFweDsNCn0NCjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIgew0KCS13ZWJraXQtYm94LXNoYWRvdzppbnNldCAxcHggMXB4IDAgcmdiYSgwLDAsMCwuMSksaW5zZXQgMCAtMXB4IDAgcmdiYSgwLDAsMCwuMDcpOw0KCWJhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMik7DQoJbWluLWhlaWdodDoyOHB4Ow0KCXBhZGRpbmctdG9wOjEwMHB4Ow0KfQ0KDQo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyIHsNCgktd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMXB4IDFweCAxcHggcmdiYSgwLDAsMCwuMjUpOw0KCWJhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuNCk7DQp9DQoNCjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6YWN0aXZlIHsNCgktd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMXB4IDFweCAzcHggcmdiYSgwLDAsMCwuMzUpOw0KCWJhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuNSk7DQp9DQo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHsNCgliYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMC4wNSk7DQp9DQoNCjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2s6dmVydGljYWwgew0KCWJvcmRlci10b3A6MXB4IHNvbGlkICNkZGQ7DQoJYm9yZGVyLWJvdHRvbToxcHggc29saWQgI2RkZDsNCn0NCg0KOjotd2Via2l0LXNjcm9sbGJhci10cmFjazpob3Jpem9udGFsIHsNCglib3JkZXItbGVmdDoxcHggc29saWQgI2RkZDsNCglib3JkZXItcmlnaHQ6MXB4IHNvbGlkICNkZGQ7DQp9DQoNCjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6dmVydGljYWwgew0KCWJvcmRlci13aWR0aDowOw0KCWJvcmRlci1sZWZ0LXdpZHRoOjBweDsNCglib3JkZXItcmlnaHQtd2lkdGg6MHB4Ow0KfQ0KDQo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvcml6b250YWwgew0KCWJvcmRlci13aWR0aDowOw0KCWJvcmRlci1ib3R0b206MHB4Ow0KCWJvcmRlci10b3A6MHB4Ow0KfQ0KDQo6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrOmhvdmVyIHsNCgktd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMXB4IDAgMCByZ2JhKDAsMCwwLC4xKTsNCgliYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjA1KTsNCn0NCg0KOjotd2Via2l0LXNjcm9sbGJhci10cmFjazphY3RpdmUgew0KCS13ZWJraXQtYm94LXNoYWRvdzppbnNldCAxcHggMCAwIHJnYmEoMCwwLDAsLjE0KSxpbnNldCAtMXB4IDAgMCByZ2JhKDAsMCwwLC4xNCk7DQoJYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4xKTsNCn0=";
var js = "";